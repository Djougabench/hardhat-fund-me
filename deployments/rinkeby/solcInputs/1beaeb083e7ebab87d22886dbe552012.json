{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0 <0.9.0;\nfunction c_0x4ef10f0e(bytes32 c__0x4ef10f0e) pure {}\n\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\nerror FundMe_NotOwner();\n\n/** @title A contract for crowd fundind\n *   @author Lionel\n *   @notice this contract is to demo a sample funding contract\n *   @dev This implements  proce feeds as our library\n */\n\ncontract FundMe {\nfunction c_0x87014f3b(bytes32 c__0x87014f3b) internal pure {}\n\n    using PriceConverter for uint256;\n\n    mapping(address => uint256) public addressToAmountFunded;\n    address[] public funders;\n\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\n    address public immutable i_owner;\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\n\n    AggregatorV3Interface public priceFeed;\n\n    modifier onlyOwner() {c_0x87014f3b(0x88f6f9a3f65472b156860f336a3dc8f608929ab4a499ab134eed38fac0adb4e3); /* function */ \n\n        // require(msg.sender == owner);\nc_0x87014f3b(0xe09d9506e1fefee472fad669e227dd7f0b0b32a32d889e99b4556399c70a0483); /* line */ \n        c_0x87014f3b(0x2a0404be5282b3d18ccb9625282371103b836db96fe06366e8716136ed5b3e75); /* statement */ \nif (msg.sender != i_owner) {c_0x87014f3b(0x7cbf365959452f4245af8f5c31a6142c9cd9a24c1f69ce249595bb6d98ebc30d); /* branch */ \nrevert FundMe_NotOwner();}else { c_0x87014f3b(0xf6d004174dad4579f1b15df962ae9d17c0a27c4c7d141e7d546c9cfd446bcdcf); /* branch */ \n}\nc_0x87014f3b(0x468286e55fa3c22ea8d1cfa478501cca20a7ebc6b4a8266cc0d16734528fcbc0); /* line */ \n        _;\n    }\n\n    constructor(address priceFeedAddress) {c_0x87014f3b(0xf609efd7a255ebd321f3326bb27b8133331df90180ed00b6623d5927176014fa); /* function */ \n\nc_0x87014f3b(0x80128f6dfce793810ff9a304da2879dc47d0140838d833bb5e0c46db5d0518cc); /* line */ \n        c_0x87014f3b(0xca638a600e077096f7b93ef6f160898ea9576d4cfaea3faef2748bc6652b1bf9); /* statement */ \ni_owner = msg.sender;\nc_0x87014f3b(0x13bfd908bc0ac9e8e19a474d9cc47221e32028a85b2bb6883add0ffc0b6f6eac); /* line */ \n        c_0x87014f3b(0x8ce051a6ddf7e3cdbb387fb72d9950b5391a29b6d5e3fa917653fdba3404a6c3); /* statement */ \npriceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    receive() external payable {\nc_0x87014f3b(0x12ca489b3717c0901b32d8b17c1fdb462a23f55c16574ab7ffd8bc0b973cbb45); /* line */ \n        fund();\n    }\n\n    fallback() external payable {c_0x87014f3b(0x84f5da9c2f3a50a876cccc2c97615fbd9ce15df9f05a781cdfc8ca7631bcc907); /* function */ \n\nc_0x87014f3b(0xd3f433c555465270c656a34a9c18b8cea986e3085abbeabde47a4031ebe6914d); /* line */ \n        c_0x87014f3b(0x16cddce4aa5756bbcabf7fddfdda9278268c2835d9fc3f72c0544c0a5c97ac06); /* statement */ \nfund();\n    }\n\n    /**\n     *   @notice this contract is to demo a sample funding contract\n     *   @dev This implements  proce feeds as our library\n     *\n     */\n\n    function fund() public payable {c_0x87014f3b(0x66398be1273f81ab9674bb0a495772a43204378c17d3f9c4270e1b8cffd08b17); /* function */ \n\nc_0x87014f3b(0x65b3e5a63e36fbaff42fa7d2794cbb1ef2f3e0db5323d2a652063755f3fc7278); /* line */ \n        c_0x87014f3b(0xb60caecb4536b2bfdb543e655743e0c6ee84a3562a17b3f74b8d8bbbeca7b2e1); /* requirePre */ \nc_0x87014f3b(0x28d3406d78dc4f6bd75ca1cd98c8614e53836f613aee12c98a311c918c13392e); /* statement */ \nrequire(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"You need to spend more ETH!\");c_0x87014f3b(0x7bac2efc99a6f9cef5f10b52e004ce001163b20bc95b79e8de6950157c8853db); /* requirePost */ \n\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \"You need to spend more ETH!\");\nc_0x87014f3b(0x106f44bbea912abbde44ad0c380c4a1905fddfef263f096a59d9a190de7b65d9); /* line */ \n        c_0x87014f3b(0xab6c2c1f5ae7cde56b9ca05d5be663c0ae0520782d845ff1c24aab12de5cf8c4); /* statement */ \naddressToAmountFunded[msg.sender] += msg.value;\nc_0x87014f3b(0x084db79cae688e04bce111a3c17568f3631c6c92d9e144422bf3bba67bd9cce9); /* line */ \n        c_0x87014f3b(0xb49685e215ee93e225960dbd9954606c4d8e1bbbebc95ca92fdcfd77b6ad6a15); /* statement */ \nfunders.push(msg.sender);\n    }\n\n    function withdraw() public payable onlyOwner {c_0x87014f3b(0xb8554ceb3ca469e11c65e808d229ca5aa6cc022ec75e2d94796ad188be8b6d95); /* function */ \n\nc_0x87014f3b(0xc185ae2eaea8a8be1f80db3b12445eeea96a9f5da87e907d0582061e180451d9); /* line */ \n        c_0x87014f3b(0xadb250a82ed117783bf6e47bfe69f4c4e50d94bfb20b705a197168d85a828aa3); /* statement */ \nfor (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\nc_0x87014f3b(0x0602d690d1e9b9bddf106815073ba983ac36b0db143dcff3777e193ea87ce8e9); /* line */ \n            c_0x87014f3b(0x2db265b032a21b411af1c0d891b5c2a70c1912fb65c9b1a09d959fc060681f10); /* statement */ \naddress funder = funders[funderIndex];\nc_0x87014f3b(0x30a77f5139ddcb52039fc4fac82869d28c5dc61b404434a01be93bcbb5c15139); /* line */ \n            c_0x87014f3b(0xf623c4577396e528ed72b7823d387445a00692a27f61ae84729060284536d9d4); /* statement */ \naddressToAmountFunded[funder] = 0;\n        }\nc_0x87014f3b(0xc576e9ad731e32b34d51dcc7cce42113f9921bd305a59005e94635042a02aff4); /* line */ \n        c_0x87014f3b(0xd810fa9ff92a14aee6f6b8c218eec3f8225597a33da27ef27a58083e470f2e0d); /* statement */ \nfunders = new address[](0);\n\nc_0x87014f3b(0xe466cee3a95b03dcc138be4fe518f4d345b0adce09d71f45ebba608aa11f59d3); /* line */ \n        c_0x87014f3b(0xc65826af1e093189d22bb5099c3d3127d21db8355022441202b764f30476bb84); /* statement */ \n(bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\nc_0x87014f3b(0x44aa24f2801292819dbf7969bf18e6e70e54e53fc98e8c2726172f4942bd204b); /* line */ \n        c_0x87014f3b(0x0a9a5303378a649d6bdba8aa178244a00ed8e6838a028a8e5631cf53d04b3bad); /* requirePre */ \nc_0x87014f3b(0xe6537d06632896ebdf9c047efc03c8b3bb2ab21e771fa65c057200be31fdd25f); /* statement */ \nrequire(callSuccess, \"Call failed\");c_0x87014f3b(0xa39ba2d5cc3f516ce3a6a0921d969437cb1c4c10baf9f3280ce37da7ff3552f8); /* requirePost */ \n\n    }\n}\n\n// Concepts we didn't cover yet (will cover in later sections)\n// 1. Enum\n// 2. Events\n// 3. Try / Catch\n// 4. Function Selector\n// 5. abi.encode / decode\n// 6. Hash with keccak256\n// 7. Yul / Assembly\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\nfunction c_0xd64b7a92(bytes32 c__0xd64b7a92) pure {}\n\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// Why is this a library and not abstract?\n// Why not an interface?\nlibrary PriceConverter {\nfunction c_0xaf3db53a(bytes32 c__0xaf3db53a) internal pure {}\n\n    // We could make this public, but then we'd have to deploy it\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {c_0xaf3db53a(0x351721a2e636cbcca2423abf8b1dca6db2d2b99443d7d725962f08daa63cafcc); /* function */ \n\nc_0xaf3db53a(0x065ae5a59499a491a2b9fbb9de4a4672b185b99b2f8338e9e4159f091eb9e93e); /* line */ \n        c_0xaf3db53a(0xbed7a337019a577d5294624a5d64433a5e19916f0ca1adba520e8a87400a3d3b); /* statement */ \n(, int256 answer, , , ) = priceFeed.latestRoundData();\n        // ETH/USD rate in 18 digit\nc_0xaf3db53a(0xcc17f7b5bd473c6a2d93b8546aea0e67d9a83abe02c8ecbc3e96ca8d330618da); /* line */ \n        c_0xaf3db53a(0x12b29c6dd917352bdbf4f57193393e55c371a1514bfab5a81ccb65f759312a35); /* statement */ \nreturn uint256(answer * 10000000000);\n    }\n\n    // 1000000000\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {c_0xaf3db53a(0xf98bf649cac861da116f9340bbcc387d0478eca098eb2df9eaee32d6f76bc9df); /* function */ \n\nc_0xaf3db53a(0x537c735f58f5aca8101844c42cff825a14ac4068fa3b514d578be24d0d25e368); /* line */ \n        c_0xaf3db53a(0x54d046c5f498918f2a0bd4d08b88f9331cb2fba88b5b19c42531a8786c7f0953); /* statement */ \nuint256 ethPrice = getPrice(priceFeed);\nc_0xaf3db53a(0xc47b584eeeb0f3fe7bf232f39ede573cc7c2731e0d610dda065b1ca8af320383); /* line */ \n        c_0xaf3db53a(0xc8a046c8e3b478440a52a28bcf10b6d9e0504e05076c324e34dd936ff489706a); /* statement */ \nuint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\nc_0xaf3db53a(0x0940bb233244d90b335437ffdebe4574cd02c68e8ad71edcf27a7e1f51e6857a); /* line */ \n        c_0xaf3db53a(0xab1a5dbcb307c8553f2cb1ae99643bca20bcd433d53b0fba2318459ef5dfc82a); /* statement */ \nreturn ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": false
    }
  }
}